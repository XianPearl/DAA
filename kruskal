#include <stdio.h>
#include <stdlib.h>

int i, j, k, a, b, u, v, n, key = 1;
int min, mincost = 0, cost[10][10], parent[10];

int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}

int unions (int i, int j) {
    if (i != j) {
        parent[j] = i;
        return 1;
    }
    return 0;
}

int main() {
    printf("\nImplementation of Kruskal's Algorithm");
    printf("\nEnter the number of vertices : ");
    scanf("%d",&n);
    printf("\nEnter the cost adjacency matrix :\n");
    for (i = 1; i <= n; i++) 
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 999;
        }

    printf("\nThe edges of minimum spanning tree are\n");
    while (key < n) {
        for (i = 1, min = 999; i <= n; i++)
            for ( j = 1; j <= n ; j++)
                if (cost[i][j] < min ) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
        u = find(u);
        v = find(v);
        
        if (unions(u,v)) {
            printf ("%d edge (%d, %d), cost = %d\n", key++, a, b, min);
            mincost+=min;
        }
        cost[a][b] = cost[b][a] = 999;
    }
    printf("\nMinimum Cost = %d units\n", mincost);
}





*********OUTPUT********
Implementation of Kruskal's Algorithm
Enter the number of vertices : 7
Enter the cost adjacency matrix :
0 1 5 0 0 0 0
1 0 4 8 7 0 0
5 4 0 6 0 2 0
0 8 6 0 11 9 0
0 7 0 11 0 3 10
0 0 2 9 3 0 12
0 0 0 0 10 12 0
The edges of minimum spanning tree are
1 edge (1, 2), cost = 1
2 edge (3, 6), cost = 2
3 edge (5, 6), cost = 3
4 edge (2, 3), cost = 4
5 edge (3, 4), cost = 6
6 edge (5, 7), cost = 10

Minimum Cost = 26 units
