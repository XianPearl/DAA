#include <stdio.h>
#include <stdlib.h>

int i, j, k, a, b, u, v, n, key = 1;
int min, mincost = 0, cost[10][10], parent[10];

int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}

int unions (int i, int j) {
    if (i != j) {
        parent[j] = i;
        return 1;
    }
    return 0;
}

int main() {
    printf("\nImplementation of Kruskal's Algorithm");
    printf("\nEnter the number of vertices : ");
    scanf("%d",&n);
    printf("\nEnter the cost adjacency matrix :\n");
    for (i = 1; i <= n; i++) 
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0)
                cost[i][j] = 999;
        }

    printf("\nThe edges of minimum spanning tree are\n");
    while (key < n) {
        for (i = 1, min = 999; i <= n; i++)
            for ( j = 1; j <= n ; j++)
                if (cost[i][j] < min ) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
        u = find(u);
        v = find(v);
        
        if (unions(u,v)) {
            printf ("%d edge (%d, %d), cost = %d\n", key++, a, b, min);
            mincost+=min;
        }
        cost[a][b] = cost[b][a] = 999;
    }
    printf("\nMinimum Cost = %d units\n", mincost);
}





*********OUTPUT********
Implementation of Kruskal's Algorithm
Enter the number of vertices : 7
Enter the cost adjacency matrix :
0 1 5 0 0 0 0
1 0 4 8 7 0 0
5 4 0 6 0 2 0
0 8 6 0 11 9 0
0 7 0 11 0 3 10
0 0 2 9 3 0 12
0 0 0 0 10 12 0
The edges of minimum spanning tree are
1 edge (1, 2), cost = 1
2 edge (3, 6), cost = 2
3 edge (5, 6), cost = 3
4 edge (2, 3), cost = 4
5 edge (3, 4), cost = 6
6 edge (5, 7), cost = 10

Minimum Cost = 26 units



**********ALGORITHM*******
Step 1: Create a forest F in such a way that every vertex of the graph is a separate tree.  
Step 2: Create a set E that contains all the edges of the graph.  
Step 3: Repeat Steps 4 and 5 while E is NOT EMPTY and F is not spanning  
Step 4: Remove an edge from E with minimum weight  
Step 5: IF the edge obtained in Step 4 connects two different trees, then add it to the forest F   
(for combining two trees into one tree).  
ELSE  
Discard the edge  
Step 6: END  



*******COMPLEXITY******
The time complexity of Kruskal's algorithm can be analyzed as follows:

1.  Sorting the edges: The first step of Kruskal's algorithm involves sorting the edges of the graph. The most commonly used sorting algorithm is quicksort, which 
has an average case time complexity of O(n log n), where n is the number of edges in the graph.

2. Union-find operations: Kruskal's algorithm also requires performing union-find operations on the edges to determine if adding an edge to the MST will create a 
cycle. A common implementation of the union-find data structure using union by rank and path compression has a time complexity of O(log n) per operation, where n 
is the number of nodes in the graph. Since Kruskal's algorithm performs at most 2n-1 union-find operations (one for each edge), the total time complexity for 
union-find operations is O(n log n).

Therefore, the overall time complexity of Kruskal's algorithm is O(n log n), which is dominated by the time complexity of sorting the edges. This makes Kruskal's 
algorithm one of the most efficient algorithms for finding the MST of a graph, and it is widely used in practice.
