#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge (int *a, int l, int m, int r) {
    int p = m-l+1, q = r-m, i, j, k = l, *s, *t;
    s = (int *)calloc(p, sizeof(int));
    t = (int *)calloc(q, sizeof(int));
    for (i = 0; i < p; i++)
        *(s+i) = *(a+l+i);
    for (i = 0; i < q; i++)
        *(t+i) = *(a+m+1+i);
        
    i = 0;
    j = 0;
    
    while (i < p && j < q) {
        if (*(s+i) <= *(t+j)) {
            *(a+k) = *(s+i);
            i++;
        } 
        else {
            *(a+k) = *(t+j);
            j++;
        }
        k++;
    }
    while (i < p) {
        *(a+k) = *(s+i);
        i++;
        k++;
    }
    while (j < q) {
        *(a+k) = *(t+j);
        j++;
        k++;
    }
}

void mergeSort (int *a, int l, int r) {
    if (l < r) {
        int m = (l+r)/2;
        mergeSort (a,l,m);
        mergeSort (a,m+1,r);
        merge (a,l,m,r);
    }
}

void main () {
    clock_t start, end;
    int *p, n, i;
    printf("Enter the array size : ");
    scanf ("%d", &n);
    p = (int *)calloc(n, sizeof(int));
    for (i = 0; i < n; i++) 
        *(p+i) = rand() % n;
    start = clock();
    mergeSort (p, 0, n-1);
    end = clock();
    printf("The array elements of merge sort : \n");
    for (i = 0; i < n; i++) 
        printf("%d  ", *(p+i));
    double duration = ((double)end - start)/CLOCKS_PER_SEC;
    printf("\nTime taken to execute in seconds : %f\n", duration);
}





********OUTPUT*********
Enter the array size : 10
The array elements of merge sort : 
1  2  3  3  5  5  6  6  7  9  
Time taken to execute in seconds : 0.000006


******ALGORITHM******
MergeSort(array)
    1. If the length of the array is 1 or less, return the array (base case).
    2. Divide the array into two halves:
        - Calculate the middle index: mid = length of array / 2.
        - Create left array = array[0] to array[mid-1].
        - Create right array = array[mid] to array[length of array - 1].
    3. Recursively call MergeSort on the left and right arrays:
        - leftArray = MergeSort(left array).
        - rightArray = MergeSort(right array).
    4. Merge the sorted left and right arrays:
        - Create an empty result array.
        - Initialize two pointers, leftPointer and rightPointer, to the beginning of the left and right arrays, respectively.
        - Compare the elements at leftPointer and rightPointer:
            - If the element in the left array is smaller or equal, add it to the result array and increment leftPointer.
            - Otherwise, add the element from the right array to the result array and increment rightPointer.
            - Repeat this process until one of the arrays is exhausted.
        - Copy any remaining elements from the left array to the result array (if any).
        - Copy any remaining elements from the right array to the result array (if any).
    5. Return the result array.


*****COMPLEXITY******
The time complexity of Merge Sort can be analyzed as follows:

1.  Splitting Step:
The splitting step involves dividing the array into halves recursively until reaching the base case (arrays of size 1 or less). This process takes O(log n) time 
because the array is divided into two equal-sized subarrays at each level of recursion. Therefore, the number of recursive calls is proportional to the logarithm 
of the number of elements in the array.

2.  Merging Step:
The merging step involves merging the subarrays back together in sorted order. This step takes O(n) time because it requires comparing and merging all the elements
in the subarrays. The merging process takes linear time as it iterates through each element once.

Since the splitting and merging steps are performed independently, the overall time complexity is determined by the merging step, which takes O(n) time.
The recurrence relation for the time complexity of Merge Sort can be expressed as:
T(n) = 2T(n/2) + O(n)
By using the Master Theorem for divide and conquer algorithms, we can deduce that the time complexity of Merge Sort is O(n log n).
In summary, the time complexity of Merge Sort is O(n log n), where n represents the number of elements in the array being sorted. 
