#include <stdio.h>
#include <stdlib.h>
#include <time.h>
 
void heapify(int a[], int n, int i)  
{  
    int largest = i; 
    int left = 2 * i + 1;  
    int right = 2 * i + 2;  
     
    if (left < n && a[left] > a[largest])  
        largest = left;  
     
    if (right < n && a[right] > a[largest])  
        largest = right;  
   
    if (largest != i) {  
        int temp = a[i];  
        a[i] = a[largest];  
        a[largest] = temp;  
          
        heapify(a, n, largest);  
    }  
}  
  
void heapSort(int a[], int n)  
{  
    for (int i = n / 2 - 1; i >= 0; i--)  
        heapify(a, n, i);  
     
    for (int i = n - 1; i >= 0; i--) {  
        int temp = a[0];  
        a[0] = a[i];  
        a[i] = temp;  
        heapify(a, i, 0);  
    }  
}  

void main () {
    int i, n;
    clock_t start, end;
    printf("Enter the size of array : ");
    scanf("%d", &n);
    int a[n];
    for (i = 0; i < n; i++)
        a[i] = rand() % n;
    start = clock();
    heapSort (a, n);
    end = clock();
    printf("After sorting the array elements are : \n");
    for (i = 0; i < n; i++) 
        printf("%d  ", a[i]);
    double duration = ((double)end - start)/CLOCKS_PER_SEC;
    printf ("\nTime taken in secs : %f secs\n", duration);
}





******OUTPUT*******
Enter the size of array : 10
After sorting the array elements are : 
1  2  3  3  5  5  6  6  7  9  
Time taken in secs : 0.000005 secs




********ALGORITHM*******
1. HeapSort(arr)  
BuildMaxHeap(arr)  
for i = length(arr) to 2  
    swap arr[1] with arr[i]  
        heap_size[arr] = heap_size[arr] ? 1  
        MaxHeapify(arr,1)  
End  

2. BuildMaxHeap(arr)  
    heap_size(arr) = length(arr)  
    for i = length(arr)/2 to 1  
MaxHeapify(arr,i)  
End  

3. MaxHeapify(arr,i)  
L = left(i)  
R = right(i)  
if L ? heap_size[arr] and arr[L] > arr[i]  
largest = L  
else  
largest = i  
if R ? heap_size[arr] and arr[R] > arr[largest]  
largest = R  
if largest != i  
swap arr[i] with arr[largest]  
MaxHeapify(arr,largest)  
End   


*******COMPLEXITY********
The time complexity of Heap Sort is O(N log N), where N represents the number of elements in the array being sorted.

The time complexity of Heap Sort can be analyzed as follows:
1.  Building the heap:
Building a heap from an unsorted array takes O(N) time complexity. This step involves calling the MaxHeapify procedure on each non-leaf node, starting from the 
last non-leaf node up to the root. Since there are N/2 non-leaf nodes in a heap, the time complexity of building the heap is O(N/2) = O(N).

2.  Sorting the array:
The sorting step of Heap Sort involves repeatedly extracting the maximum element from the heap and placing it at the end of the array. This step is performed N 
times since there are N elements in the array.
(i) Extracting the maximum element from the heap takes O(1) time complexity.
(ii) Heapifying the remaining elements after each extraction takes O(log N) time complexity, as it involves restoring the heap property by comparing the element at 
a given index with its left and right child nodes.
Therefore, the time complexity of the sorting step is N * O(log N) = O(N log N).

Overall, the time complexity of Heap Sort is dominated by the sorting step, resulting in a time complexity of O(N log N). The time complexity of building the heap 
contributes O(N) to the overall time complexity, but it is typically overshadowed by the sorting step.
