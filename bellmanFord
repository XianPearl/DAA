#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

struct Edge {
    int src, dest, weight;
};

struct Graph {
    int V, E;
    struct Edge* edge;
};

struct Graph* createGraph(int V, int E) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*)malloc(graph->E * sizeof(struct Edge));
    return graph;
}
  
void printArr(int dist[], int n) {
    printf("Vertex   Distance from Source\n");
    for (int i = 0; i < n; ++i)
        printf("%d \t\t %d\n", i, dist[i]);
}
  
void BellmanFord(struct Graph* graph, int src) {
    int V = graph->V;
    int E = graph->E;
    int dist[V];
  
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[src] = 0;
  
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int weight = graph->edge[j].weight;
            if (dist[u] != INT_MAX
                && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }
  
    for (int i = 0; i < E; i++) {
        int u = graph->edge[i].src;
        int v = graph->edge[i].dest;
        int weight = graph->edge[i].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            printf("Graph contains negative weight cycle");
            return; 
        }
    }
    printArr(dist, V);
}
  
int main(){
    int V, E;
    printf ("Enter the no. of vertices & edges : ");
    scanf ("%d %d", &V, &E);
    struct Graph *graph = createGraph(V, E);
    for (int i = 0; i < E; i++) {
        printf("Enter the source, destination & weight : ");
        scanf("%d %d %d", &graph->edge[i].src, &graph->edge[i].dest, &graph->edge[i].weight);
    }
    BellmanFord(graph, 0);
}



**********OUTPUT************
Enter the no. of vertices & edges : 5 8
Enter the source, destination & weight : 0 1 -1
Enter the source, destination & weight : 0 2 4
Enter the source, destination & weight : 1 2 3
Enter the source, destination & weight : 1 3 2
Enter the source, destination & weight : 1 4 2
Enter the source, destination & weight : 3 2 5
Enter the source, destination & weight : 3 1 1
Enter the source, destination & weight : 4 3 -3
Vertex   Distance from Source
0 		 0
1 		 -1
2 		 2
3 		 -2
4 		 1



******ALGORITHM******
function bellmanFord(G, S)  
  for each vertex V in G  
    distance[V] <- infinite  
      previous[V] <- NULL  
  distance[S] <- 0  
  
  for each vertex V in G                  
    for each edge (U,V) in G  
      tempDistance <- distance[U] + edge_weight(U, V)  
      if tempDistance < distance[V]  
        distance[V] <- tempDistance  
        previous[V] <- U  
  
  for each edge (U,V) in G  
    If distance[U] + edge_weight(U, V) < distance[V}  
      Error: Negative Cycle Exists  
  
  return distance[], previous[]  
  
  
  

*****COMPLEXITY*********
The time complexity of the Bellman-Ford algorithm depends on the number of vertices and edges in the graph.
Let's denote V as the number of vertices and E as the number of edges in the graph.
The basic Bellman-Ford algorithm consists of two main steps: relaxation and edge relaxation. The relaxation step iterates through all the edges in the graph V-1 
times and updates the distances of the vertices based on the current path. The edge relaxation step is an additional pass that checks for negative cycles. 
Hence, the total number of iterations performed is V-1.
In each iteration, the algorithm checks all the edges, and for each edge, it performs a relaxation operation if necessary. Therefore, the time complexity of each
iteration is O(E).
Therefore, the overall time complexity of the Bellman-Ford algorithm is O(V * E) since we have V-1 iterations, and each iteration takes O(E) time.
In the worst-case scenario, where the graph is dense and contains a large number of edges, the time complexity can be approximated as O(V^3) because E can be at
most O(V^2) for a dense graph.
It's important to note that the Bellman-Ford algorithm can be optimized to achieve better performance in practice. One common optimization is to use a priority 
queue (e.g., using a min-heap) to select the edges for relaxation instead of scanning all edges in each iteration. This optimization reduces the time complexity 
for each iteration to O(E log V), resulting in an overall time complexity of O(V * E log V). However, the worst-case time complexity remains O(V^3) due to the V-1 
iterations.

In summary, the time complexity of the Bellman-Ford algorithm is O(V * E) or O(V^3), depending on the graph's density and the optimization techniques used.
