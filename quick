#include <stdio.h> 
#include <stdlib.h>
#include <time.h>

int partition (int a[], int start, int end)  {  
    int pivot = a[end]; 
    int i = (start - 1);  
    for (int j = start; j < end; j++) {   
        if (a[j] < pivot) {  
            i++;
            int t = a[i];  
            a[i] = a[j];  
            a[j] = t;  
        }  
    }  
    int t = a[i+1];  
    a[i+1] = a[end];  
    a[end] = t;  
    return (i + 1);  
}  
  
void quick(int a[], int start, int end) 
{  
    if (start < end)  
    {  
        int p = partition(a, start, end);  
        quick(a, start, p - 1);  
        quick(a, p + 1, end);  
    }  
}  
  
void printArr(int a[], int n) {  
    int i;  
    for (i = 0; i < n; i++)  
        printf("%d ", a[i]);  
}  

int main()  {  
    clock_t start, end;
    int n, i;
    printf("Enter the size of array : ");
    scanf("%d", &n);
    int a[n];
    for (i = 0; i < n; i++)
        a[i] = rand() % n;
    printf("Before sorting array elements are - \n");  
    printArr(a, n); 
    start = clock();
    quick(a, 0, n - 1);  
    end = clock();
    printf("\nAfter sorting array elements are - \n");    
    printArr(a, n);  
    double duration = ((double)end - start)/CLOCKS_PER_SEC;
    printf("\nTime taken to execute in seconds : %f\n secs", duration);
}  



**********OUTPUT*************
Enter the size of array : 10
Before sorting array elements are - 
3 6 7 5 3 5 6 2 9 1 
After sorting array elements are - 
1 2 3 3 5 5 6 6 7 9 
Time taken to execute in seconds : 0.000001 secs


*****ALGORITHM******
QUICKSORT (array A, start, end)     
{  
 1 if (start < end)     
 2 {  
3 p = partition(A, start, end)  
4 QUICKSORT (A, start, p - 1)    
5 QUICKSORT (A, p + 1, end)    
6 }   
}  

PARTITION (array A, start, end)     
{  
 1 pivot ? A[end]     
 2 i ? start-1     
 3 for j ? start to end -1 {  
 4 do if (A[j] < pivot) {    
 5 then i ? i + 1     
 6 swap A[i] with A[j]   
 7  }}   
 8 swap A[i+1] with A[end]     
 9 return i+1  
}  


********COMPLEXITY*****
The time complexity of the Quick Sort algorithm depends on the choice of the pivot and the partitioning strategy. On average, Quick Sort has a time complexity of 
O(n log n), where n represents the number of elements in the array being sorted. However, in the worst case, the time complexity can be O(n^2).

Here's a breakdown of the time complexity analysis for Quick Sort:
(i) Partitioning Step:
The partitioning step involves selecting a pivot element and partitioning the array such that all elements smaller than the pivot are placed before it, and all 
elements larger than the pivot are placed after it. This step takes linear time, O(n), as it requires iterating through all the elements in the array once.

(ii) Recursive Calls:
After partitioning, the array is divided into two subarrays based on the pivot element. Quick Sort is then recursively called on each subarray.

1. Best Case:
In Quicksort, the best-case occurs when the pivot element is the middle element or near to the middle element. The best-case time complexity of quicksort is 
O(n*logn).

2. Average Case:
In the average case, the partitioning step divides the array into roughly two equal-sized subarrays. Therefore, at each level of recursion, the size of the 
subarrays is halved. This results in a time complexity of O(log n) for the recursive calls.

3. Worst Case:
In the worst case, the partitioning step consistently chooses a pivot element that is the smallest or largest element in the array. As a result, one subarray has a
size of 0, while the other subarray has a size of n-1. This scenario leads to an unbalanced partitioning, where each recursive call only reduces the size of the array by 1. In the worst case, the number of recursive calls is equal to the number of elements in the array, resulting in a time complexity of O(n).

(iii) Overall Time Complexity:
On average, Quick Sort performs O(n log n) comparisons and swaps. However, in the worst case, it performs O(n^2) comparisons and swaps. The worst-case scenario 
occurs when the array is already sorted or nearly sorted and a poor choice of pivot is made.
