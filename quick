#include <stdio.h> 
#include <stdlib.h>
#include <time.h>

int partition (int a[], int start, int end)  {  
    int pivot = a[end]; 
    int i = (start - 1);  
    for (int j = start; j < end; j++) {   
        if (a[j] < pivot) {  
            i++;
            int t = a[i];  
            a[i] = a[j];  
            a[j] = t;  
        }  
    }  
    int t = a[i+1];  
    a[i+1] = a[end];  
    a[end] = t;  
    return (i + 1);  
}  
  
void quick(int a[], int start, int end) 
{  
    if (start < end)  
    {  
        int p = partition(a, start, end);  
        quick(a, start, p - 1);  
        quick(a, p + 1, end);  
    }  
}  
  
void printArr(int a[], int n) {  
    int i;  
    for (i = 0; i < n; i++)  
        printf("%d ", a[i]);  
}  

int main()  {  
    clock_t start, end;
    int n, i;
    printf("Enter the size of array : ");
    scanf("%d", &n);
    int a[n];
    for (i = 0; i < n; i++)
        a[i] = rand() % n;
    printf("Before sorting array elements are - \n");  
    printArr(a, n); 
    start = clock();
    quick(a, 0, n - 1);  
    end = clock();
    printf("\nAfter sorting array elements are - \n");    
    printArr(a, n);  
    double duration = ((double)end - start)/CLOCKS_PER_SEC;
    printf("\nTime taken to execute in seconds : %f\n secs", duration);
}  



**********OUTPUT*************
Enter the size of array : 10
Before sorting array elements are - 
3 6 7 5 3 5 6 2 9 1 
After sorting array elements are - 
1 2 3 3 5 5 6 6 7 9 
Time taken to execute in seconds : 0.000001 secs
