#include <stdio.h>
#include <time.h>

struct Item {
    int value;
    int weight;
};

int knapsack(struct Item items[], int n, int capacity, int subset[], double vector[]) {
    int i, j, max_value = 0;

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if ((double)items[i].value/items[i].weight < (double)items[j].value/items[j].weight) {
                struct Item temp = items[i];
                items[i] = items[j];
                items[j] = temp;
            }
        }
    }

    for (i = 0; i < n; i++) {
        if (capacity == 0) 
            break;
            
        if (items[i].weight <= capacity) {
            max_value += items[i].value;
            capacity -= items[i].weight;
            subset[i] = items[i].weight;
            vector[i] = 1;
        } else {
            max_value += (double)items[i].value/items[i].weight * capacity;
            capacity = 0;
            subset[i] = items[i].weight;
            vector[i] = 0.5;
        }
    }
    return max_value;
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the capacity of knapsack: ");
    scanf("%d", &capacity);

    struct Item items[n];
    int subset[n];
    double vector[n];
    int i;
    for (i = 0; i < n; i++) {
        printf("Enter the value and weight of item %d: ", i+1);
        scanf("%d %d", &items[i].value, &items[i].weight);
    }
    
    clock_t start, end;
    double cpu_time_used;
    start = clock();
    int max_value = knapsack(items, n, capacity, subset, vector);
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("Maximum value that can be obtained = %d\n", max_value);
    printf("Weight     Amount used\n");
    for (i = 0; i < n; i++)
        printf("%d     %f\n", subset[i], vector[i]);

    printf("Time taken: %f seconds\n", cpu_time_used);
}



*****OUTPUT******
Enter the number of items: 4
Enter the capacity of knapsack: 6
Enter the value and weight of item 1: 9 1
Enter the value and weight of item 2: 10 2
Enter the value and weight of item 3: 12 2
Enter the value and weight of item 4: 12 3
Maximum value that can be obtained = 35
Weight     Amount used
1     1.000000
2     1.000000
2     1.000000
3     0.500000
Time taken: 0.000004 seconds
