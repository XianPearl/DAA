#include <stdio.h>
#include <time.h>

struct Item {
    int value;
    int weight;
};

int knapsack(struct Item items[], int n, int capacity, int subset[], double vector[]) {
    int i, j, max_value = 0;

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if ((double)items[i].value/items[i].weight < (double)items[j].value/items[j].weight) {
                struct Item temp = items[i];
                items[i] = items[j];
                items[j] = temp;
            }
        }
    }

    for (i = 0; i < n; i++) {
        if (capacity == 0) 
            break;
            
        if (items[i].weight <= capacity) {
            max_value += items[i].value;
            capacity -= items[i].weight;
            subset[i] = items[i].weight;
            vector[i] = 1;
        } else {
            max_value += (double)items[i].value/items[i].weight * capacity;
            capacity = 0;
            subset[i] = items[i].weight;
            vector[i] = 0.5;
        }
    }
    return max_value;
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the capacity of knapsack: ");
    scanf("%d", &capacity);

    struct Item items[n];
    int subset[n];
    double vector[n];
    int i;
    for (i = 0; i < n; i++) {
        printf("Enter the value and weight of item %d: ", i+1);
        scanf("%d %d", &items[i].value, &items[i].weight);
    }
    
    clock_t start, end;
    double cpu_time_used;
    start = clock();
    int max_value = knapsack(items, n, capacity, subset, vector);
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("Maximum value that can be obtained = %d\n", max_value);
    printf("Weight     Amount used\n");
    for (i = 0; i < n; i++)
        printf("%d     %f\n", subset[i], vector[i]);

    printf("Time taken: %f seconds\n", cpu_time_used);
}



*****OUTPUT******
Enter the number of items: 4
Enter the capacity of knapsack: 6
Enter the value and weight of item 1: 9 1
Enter the value and weight of item 2: 10 2
Enter the value and weight of item 3: 12 2
Enter the value and weight of item 4: 12 3
Maximum value that can be obtained = 35
Weight     Amount used
1     1.000000
2     1.000000
2     1.000000
3     0.500000
Time taken: 0.000004 seconds




********ALGORITHM********
FractionalKnapsack(items[], capacity)
    1. Sort the items in non-increasing order of their value-to-weight ratio.
    2. Create an empty knapsack.
    3. Initialize the total value and remaining capacity of the knapsack to 0.
    
    4. For each item in the sorted list:
        5. If the item's weight is less than or equal to the remaining capacity:
            6. Add the whole item to the knapsack.
            7. Update the total value and remaining capacity.
        8. Otherwise:
            9. Calculate the fraction of the item that can fit into the knapsack.
            10. Add the fraction of the item to the knapsack.
            11. Update the total value and remaining capacity.
            12. Break out of the loop since the knapsack is full.
    
    13. Return the knapsack with the maximum value.



*******COMPLEXITY*********
The time complexity of the Fractional Knapsack algorithm depends on the sorting step and the subsequent iteration over the sorted items.
Let's denote N as the number of items.

1.  Sorting Step:
The algorithm requires sorting the N items based on their value-to-weight ratios. The time complexity of the sorting step depends on the sorting algorithm used. 
The most commonly used sorting algorithms, such as QuickSort or MergeSort, have an average time complexity of O(N log N) or worst-case time complexity of O(N^2). 
Therefore, the time complexity of the sorting step is typically O(N log N).

2.  Iteration Step:
After sorting the items, the algorithm iterates over the sorted list of N items and performs constant-time operations for each item.

Therefore, the time complexity of the iteration step is O(N).
Overall, the time complexity of the Fractional Knapsack algorithm is dominated by the sorting step, resulting in a time complexity of O(N log N)
