#include <stdio.h>
#include <stdlib.h>

struct node {
  int vertex;
  struct node* next;
};

struct Graph {
  int numVertices;
  int* visited;

  struct node** adjLists;
};

void DFS(struct Graph* graph, int vertex) {
  struct node* adjList = graph->adjLists[vertex];
  struct node* temp = adjList;

  graph->visited[vertex] = 1;
  printf("Visited %d \n", vertex);

  while (temp != NULL) {
    int connectedVertex = temp->vertex;

    if (graph->visited[connectedVertex] == 0) {
      DFS(graph, connectedVertex);
    }
    temp = temp->next;
  }
}

struct node* createNode(int v) {
  struct node* newNode = malloc(sizeof(struct node));
  newNode->vertex = v;
  newNode->next = NULL;
  return newNode;
}

struct Graph* createGraph(int vertices) {
  struct Graph* graph = malloc(sizeof(struct Graph));
  graph->numVertices = vertices;

  graph->adjLists = malloc(vertices * sizeof(struct node*));

  graph->visited = malloc(vertices * sizeof(int));

  int i;
  for (i = 0; i < vertices; i++) {
    graph->adjLists[i] = NULL;
    graph->visited[i] = 0;
  }
  return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
  struct node* newNode = createNode(dest);
  newNode->next = graph->adjLists[src];
  graph->adjLists[src] = newNode;

  newNode = createNode(src);
  newNode->next = graph->adjLists[dest];
  graph->adjLists[dest] = newNode;
}

void printGraph(struct Graph* graph) {
  int v;
  for (v = 0; v < graph->numVertices; v++) {
    struct node* temp = graph->adjLists[v];
    printf("\n Adjacency list of vertex %d\n ", v);
    while (temp) {
      printf("%d -> ", temp->vertex);
      temp = temp->next;
    }
    printf("\n");
  }
}

int main() {
  int n, m, i, src, dest;
  printf("Enter no of vertices and edges : ");
  scanf("%d %d", &n, &m);
  struct Graph* graph = createGraph(n);
  for (i = 0; i < m; i++) {
      printf("Enter source and destination of edge %d : ",i+1);
      scanf("%d %d", &src, &dest);
      addEdge(graph, src, dest);
  }

  printGraph(graph);

  DFS(graph, src);
}



*****OUTPUT*****
Enter no of vertices and edges : 4 4
Enter source and destination of edge 1 : 0 1
Enter source and destination of edge 2 : 0 2
Enter source and destination of edge 3 : 0 3
Enter source and destination of edge 4 : 3 1
Adjacency list of vertex 0
 3 -> 2 -> 1 -> 

 Adjacency list of vertex 1
 3 -> 0 -> 

 Adjacency list of vertex 2
 0 -> 

 Adjacency list of vertex 3
 1 -> 0 -> 
Visited 3 
Visited 1 
Visited 0 
Visited 2 
