#include <stdio.h>
int a,b,u,v,n,i,j,key=1;
int visited[10] = {0}, min, mincost = 0, cost[10][10];

void main() {
    printf("\nImplementation of Prim's Algorithm");
    printf("\nEnter the number of vertices : ");
    scanf("%d",&n);
    printf("\nEnter the adjacency matrix: \n");
    for (i=1;i<=n;i++)
        for (j=1;j<=n;j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j]==0)
                cost[i][j]=999;
        }
    visited[1]=1;
    printf("\n");
    while (key<n) {
        for (i=1,min=999;i<=n;i++)
            for (j=1;j<=n;j++)
                if (cost[i][j]<min)
                    if (visited[1]!=0) {
                        min = cost[i][j];
                        a=u=i;
                        b=v=j;
                    }
        if (visited[u]==0 || visited[v]==0) {
            printf("\nEdge %d : (%d <-> %d) cost : %d",key++,a,b,min);
            mincost+=min;
            visited[b]=1;
        }
        cost[a][b]=cost[b][a]=999;
    }
    printf("\nMinimum cost = %d units",mincost);
}



********OUTPUT********
Implementation of Prim's Algorithm
Enter the number of vertices : 6
Enter the adjacency matrix: 
0 3 1 6 0 0
3 0 5 0 3 0
1 5 0 5 6 4
6 0 5 0 0 2
0 3 6 0 0 6
0 0 4 2 6 0
Edge 1 : (1 <-> 3) cost : 1
Edge 2 : (4 <-> 6) cost : 2
Edge 3 : (1 <-> 2) cost : 3
Edge 4 : (2 <-> 5) cost : 3
Edge 5 : (3 <-> 4) cost : 5
Minimum cost = 14 units


*******ALGORITHM*****
Prim(graph)
    1. Create an empty set to store the minimum spanning tree: MST.
    2. Create a priority queue to store the vertices and their respective key values.
    3. Initialize the key values of all vertices to positive infinity, except for the first vertex which is set to 0.
    4. Initialize the parent values of all vertices to null.
    5. Insert the first vertex into the priority queue with a key value of 0.
    
    6. While the priority queue is not empty:
        7. Extract the vertex with the minimum key value from the priority queue: currentVertex.
        8. Add currentVertex to the MST.
        
        9. For each neighborVertex of currentVertex:
            10. If neighborVertex is in the priority queue and the weight of the edge (currentVertex, neighborVertex) is less than its key value:
                11. Update the key value of neighborVertex to the weight of the edge (currentVertex, neighborVertex).
                12. Update the parent of neighborVertex to currentVertex.
    
    13. Return the MST.


*****COMPLEXITY******
The time complexity of Prim's algorithm using a greedy approach depends on the data structure used for selecting the vertex with the minimum key value.

Let's denote V as the number of vertices and E as the number of edges in the graph.

1.  Initialization:
Initializing the key values and parent values of all vertices takes O(V) time.

2.  Selecting the minimum key vertex:
In each iteration, the algorithm selects the vertex with the minimum key value from the remaining vertices. If a priority queue based on a binary heap or a 
Fibonacci heap is used, the extraction operation takes O(log V) time. If a simple array-based implementation is used, finding the minimum key vertex takes O(V) 
time.

3.  Updating key values and parents:
For each neighboring vertex of the current vertex, the algorithm checks if the weight of the connecting edge is smaller than the current key value. If so, it 
updates the key value and parent of the neighboring vertex. This step is performed for a maximum of E edges.

4.  Total time complexity:
(i) When using a binary heap or Fibonacci heap: The overall time complexity of Prim's algorithm using a greedy approach with a binary heap or Fibonacci heap is 
O((V + E) log V). This is because selecting the minimum key vertex takes O(log V) time in each iteration, and there can be a maximum of V iterations.
(ii) When using a simple array-based implementation: The overall time complexity is O(V^2) since finding the minimum key vertex takes O(V) time in each iteration, 
and there can be a maximum of V iterations.
