#include <stdio.h>
#define INFINITY 9999
#define MAX 10

void Dijkstra(int Graph[MAX][MAX], int n, int start) {
  int cost[MAX][MAX], distance[MAX], pred[MAX];
  int visited[MAX], count, mindistance, nextnode, i, j;

  for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
      if (Graph[i][j] == 0)
        cost[i][j] = INFINITY;
      else
        cost[i][j] = Graph[i][j];

  for (i = 0; i < n; i++) {
    distance[i] = cost[start][i];
    pred[i] = start;
    visited[i] = 0;
  }

  distance[start] = 0;
  visited[start] = 1;
  count = 1;

  while (count < n - 1) {
    mindistance = INFINITY;

    for (i = 0; i < n; i++)
      if (distance[i] < mindistance && !visited[i]) {
        mindistance = distance[i];
        nextnode = i;
      }

    visited[nextnode] = 1;
    for (i = 0; i < n; i++)
      if (!visited[i])
        if (mindistance + cost[nextnode][i] < distance[i]) {
          distance[i] = mindistance + cost[nextnode][i];
          pred[i] = nextnode;
        }
    count++;
  }

  for (i = 0; i < n; i++)
    if (i != start) {
      printf("\nDistance from source to %d: %d", i, distance[i]);
    }
}
int main() {
  int Graph[MAX][MAX], i, j, n, u;
  printf("Enter the no of edges : ");
  scanf("%d",&n);
  for (i=0;i<n;i++) {
    for (j=0;j<n;j++) {
        printf("Graph[%d][%d] = ",i,j);
        scanf("%d",&Graph[i][j]);
    }
    printf("\n");
  }
  
  u = 0;
  Dijkstra(Graph, n, u);
}




*******OUTPUT*******
Enter the no of edges : 7
Graph ={{0,0,1,2,0,0,0},
        {0,0,2,0,0,3,0},
        {1,2,0,1,3,0,0},
        {2,0,1,0,0,0,1},
        {0,0,3,0,0,2,0},
        {0,3,0,0,2,0,1},
        {0,0,0,1,0,1,0}}

Distance from source to 1: 3
Distance from source to 2: 1
Distance from source to 3: 2
Distance from source to 4: 4
Distance from source to 5: 4
Distance from source to 6: 3




******ALGORITHM*********
function dijkstra(G, S)
    for each vertex V in G
        distance[V] <- infinite
        previous[V] <- NULL
        If V != S, add V to Priority Queue Q
    distance[S] <- 0
	
    while Q IS NOT EMPTY
        U <- Extract MIN from Q
        for each unvisited neighbour V of U
            tempDistance <- distance[U] + edge_weight(U, V)
            if tempDistance < distance[V]
                distance[V] <- tempDistance
                previous[V] <- U
    return distance[], previous[]
    
    
    


********COMPLEXITY**********
The time complexity of Dijkstra's algorithm for finding the shortest path in a weighted graph depends on the specific implementation and data structures used.

Let's denote V as the number of vertices and E as the number of edges in the graph.

1.  Initialization:
The initialization step of Dijkstra's algorithm involves setting the initial distances from the source vertex to all other vertices as infinity, except for the 
source vertex itself, which is set to 0. This initialization step takes O(V) time.

2.  Priority Queue Operations:
Dijkstra's algorithm uses a priority queue (typically implemented as a min-heap) to efficiently select the next vertex with the minimum distance from the source. 
In each iteration, the algorithm extracts the vertex with the minimum distance from the priority queue and relaxes all its neighboring vertices.
The total number of priority queue operations performed by Dijkstra's algorithm depends on the number of vertices and edges in the graph. In the worst case, each 
vertex can be inserted and extracted from the priority queue once, and each edge can be relaxed once. Therefore, the total number of priority queue operations is 
proportional to the number of vertices and edges, i.e., O(V + E).

3.  Relaxation Operations:
For each vertex, Dijkstra's algorithm relaxes its neighboring vertices by updating their distances if a shorter path is found through the current vertex. 
The relaxation step typically takes constant time for each edge relaxation.

Overall, the time complexity of Dijkstra's algorithm depends on the priority queue operations, which dominate the time complexity. Therefore, the time complexity 
of Dijkstra's algorithm can be approximated as O(V + E).
