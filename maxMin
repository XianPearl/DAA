#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int max, min;

void random_input (int A[], int n) {
    srand(time(0));
    for (int i = 0; i < n; i++)
        A[i] = rand() % 1000;
}

void display (int A[], int n){
    for (int i = 0; i < n; i++)
        printf("%d  ", A[i]);
}

void Max_min (int A[], int i, int j) {
    int max1, min1, mid;
    if (i == j)
        max = min = A[i];
    else {
        if (i == j-1) {
            if (A[i] < A[j]) {
                max = A[j];
                min = A[j];
            }
            else {
                max = A[i];
                min = A[j];
            }
        }
        else {
            mid = (i+j)/2;
            Max_min (A, i, mid);
            max1 = max;
            min1 = min;
            Max_min (A,mid+1, j);
            if (max < max1)
                max = max1;
            if (min > min1)
                min = min1;
        }
    }
}

void main () {
    int i, n ;
    clock_t start, end;
    double h;
    printf("Array size : ");
    scanf("%d", &n);
    int A[n];
    random_input (A, n);
    display (A, n);
    start = clock();
    Max_min (A, 0, n-1);
    end = clock();
    h = (double)(end - start)/CLOCKS_PER_SEC;
    printf ("\nMax : %d", max);
    printf ("\nMin : %d", min);
    printf("\n%f sec\n",h);
}



******OUTPUT********
Array size : 10
598  972  775  313  730  925  969  173  330  412  
Max : 972
Min : 173
0.000002 sec


*******ALGORITHM*****
Max:  a [i]
Min:   a [i]
For i= 2 to n do
If a[i]> max then
max = a[i]
if a[i] < min then
min: a[i]
return (max, min)


******COMPLEXITY******
The time complexity of this algorithm can be analyzed as follows:

1.  Divide Step:
At each step, the array is divided into two subarrays. This step takes constant time, i.e., O(1).

2.  Conquer Step:
The conquer step involves solving the subproblems independently by recursively calling MaxMin on the subarrays.
(i) Since the array is divided into two halves at each step, the total number of recursive calls is O(log n).
(ii) Each recursive call processes a subarray of size n/2, resulting in a total time complexity of O(n).

3.  Combine Step:
The combine step involves comparing the maximum and minimum values obtained from the subarrays. This step takes constant time, i.e., O(1).

Therefore, the overall time complexity of the Max-Min algorithm using the divide and conquer approach is given by:
T(n) = 2T(n/2) + O(1)
By using the Master Theorem for divide and conquer algorithms, we can deduce that the time complexity is O(n).

In summary, the time complexity of the Max-Min problem using the divide and conquer approach is O(n) in the best and worst case scenarios, where n is the number of
elements in the input array.
