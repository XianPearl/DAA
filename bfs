#include <stdio.h>
#include <stdlib.h>
#define SIZE 40

struct queue {
  int items[SIZE];
  int front;
  int rear;
};

struct queue* createQueue();
void enqueue(struct queue* q, int);
int dequeue(struct queue* q);
void display(struct queue* q);
int isEmpty(struct queue* q);
void printQueue(struct queue* q);

struct node {
  int vertex;
  struct node* next;
};

struct node* createNode(int);

struct Graph {
  int numVertices;
  struct node** adjLists;
  int* visited;
};

// BFS algorithm
void bfs(struct Graph* graph, int startVertex) {
  struct queue* q = createQueue();

  graph->visited[startVertex] = 1;
  enqueue(q, startVertex);

  while (!isEmpty(q)) {
    printQueue(q);
    int currentVertex = dequeue(q);
    printf("Visited %d\n", currentVertex);

    struct node* temp = graph->adjLists[currentVertex];

    while (temp) {
      int adjVertex = temp->vertex;

      if (graph->visited[adjVertex] == 0) {
        graph->visited[adjVertex] = 1;
        enqueue(q, adjVertex);
      }
      temp = temp->next;
    }
  }
}

// Creating a node
struct node* createNode(int v) {
  struct node* newNode = malloc(sizeof(struct node));
  newNode->vertex = v;
  newNode->next = NULL;
  return newNode;
}

// Creating a graph
struct Graph* createGraph(int vertices) {
  struct Graph* graph = malloc(sizeof(struct Graph));
  graph->numVertices = vertices;

  graph->adjLists = malloc(vertices * sizeof(struct node*));
  graph->visited = malloc(vertices * sizeof(int));

  int i;
  for (i = 0; i < vertices; i++) {
    graph->adjLists[i] = NULL;
    graph->visited[i] = 0;
  }

  return graph;
}

// Add edge
void addEdge(struct Graph* graph, int src, int dest) {
  // Add edge from src to dest
  struct node* newNode = createNode(dest);
  newNode->next = graph->adjLists[src];
  graph->adjLists[src] = newNode;

  // Add edge from dest to src
  newNode = createNode(src);
  newNode->next = graph->adjLists[dest];
  graph->adjLists[dest] = newNode;
}

// Create a queue
struct queue* createQueue() {
  struct queue* q = malloc(sizeof(struct queue));
  q->front = -1;
  q->rear = -1;
  return q;
}

// Check if the queue is empty
int isEmpty(struct queue* q) {
  if (q->rear == -1)
    return 1;
  else
    return 0;
}

// Adding elements into queue
void enqueue(struct queue* q, int value) {
  if (q->rear == SIZE - 1)
    printf("\nQueue is Full!!");
  else {
    if (q->front == -1)
      q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
  }
}

// Removing elements from queue
int dequeue(struct queue* q) {
  int item;
  if (isEmpty(q)) {
    printf("Queue is empty");
    item = -1;
  } else {
    item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
      printf("Resetting queue ");
      q->front = q->rear = -1;
    }
  }
  return item;
}

// Print the queue
void printQueue(struct queue* q) {
  int i = q->front;

  if (isEmpty(q)) {
    printf("Queue is empty");
  } else {
    printf("\nQueue contains \n");
    for (i = q->front; i < q->rear + 1; i++) {
      printf("%d ", q->items[i]);
    }
  }
}

int main() {
  int n, m, i, src, dest;
  printf("Enter no of vertices and edges : ");
  scanf("%d %d", &n, &m);
  struct Graph* graph = createGraph(n);
  for (i = 0; i < m; i++) {
      printf("Enter source and destination of edge %d : ",i+1);
      scanf("%d %d", &src, &dest);
      addEdge(graph, src, dest);
  }

  bfs(graph, src);
}



*****OUTPUT*****
Enter no of vertices and edges : 6 7
Enter source and destination of edge 1 : 0 1
Enter source and destination of edge 2 : 0 2
Enter source and destination of edge 3 : 1 2
Enter source and destination of edge 4 : 1 4
Enter source and destination of edge 5 : 1 3
Enter source and destination of edge 6 : 2 4
Enter source and destination of edge 7 : 3 4
Queue contains 
3 Resetting queue Visited 3

Queue contains 
4 1 Visited 4

Queue contains 
1 2 Visited 1

Queue contains 
2 0 Visited 2

Queue contains 
0 Resetting queue Visited 0





********ALGORITHM*********
The algorithm works as follows:
1. Start by putting any one of the graph's vertices at the back of a queue.
2. Take the front item of the queue and add it to the visited list.
3. Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the back of the queue.
4. Keep repeating steps 2 and 3 until the queue is empty.


********PSEUDOCODE**********
create a queue Q 
mark v as visited and put v into Q 
while Q is non-empty 
    remove the head u of Q 
    mark and enqueue all (unvisited) neighbours of u
    
    
    
    
*********COMPLEXITY*******
The time complexity of Breadth-First Search (BFS) is determined by the number of vertices (V) and edges (E) in the graph being traversed.
In the worst case, BFS visits all vertices and edges of the graph, ensuring that each vertex is visited exactly once. The time complexity can be analyzed as 
follows:

1.  Enqueuing and dequeuing operations:
In BFS, each vertex is enqueued and dequeued once. Since each vertex is processed only once, the total number of enqueuing and dequeuing operations is proportional
to the number of vertices in the graph, i.e., O(V).

2.  Visiting adjacent vertices:
For each dequeued vertex, BFS visits all its adjacent vertices to determine whether they have been visited or not. In the worst case, each vertex can have at most 
E edges. Therefore, the time complexity of visiting adjacent vertices for all vertices in the graph is O(E).

Overall, the time complexity of BFS is O(V + E). The dominant factor between V and E depends on the characteristics of the graph.
In a sparse graph with relatively few edges compared to the number of vertices (E << V), the time complexity of BFS approaches O(V). This is because the number of 
edges is much smaller than the number of vertices, and visiting adjacent vertices becomes less significant.

In a dense graph with many edges compared to the number of vertices (E ~ V^2), the time complexity of BFS approaches O(E). This is because the number of edges is 
comparable to or even larger than the number of vertices, and visiting adjacent vertices dominates the overall time complexity.
In summary, the time complexity of BFS is O(V + E) and can be affected by the graph's characteristics, with the dominant factor being either the number of vertices 
or the number of edges depending on the graph's sparsity or density.
